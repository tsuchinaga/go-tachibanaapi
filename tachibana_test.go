package tachibana

import (
	"context"
	"errors"
	"math"
	"net/http"
	"net/http/httptest"
	"reflect"
	"testing"
	"time"
)

type testRequester struct {
	iRequester
	get1          []byte
	get2          error
	getCount      int
	getHistory    []interface{}
	stream1       chan []byte
	stream2       chan error
	streamCount   int
	streamHistory []interface{}
}

func (t *testRequester) get(ctx context.Context, uri string, request interface{}) ([]byte, error) {
	t.getCount++
	t.getHistory = append(t.getHistory, ctx)
	t.getHistory = append(t.getHistory, uri)
	t.getHistory = append(t.getHistory, request)
	return t.get1, t.get2
}
func (t *testRequester) stream(ctx context.Context, uri string, request interface{}) (<-chan []byte, <-chan error) {
	t.streamCount++
	t.streamHistory = append(t.streamHistory, ctx)
	t.streamHistory = append(t.streamHistory, uri)
	t.streamHistory = append(t.streamHistory, request)
	return t.stream1, t.stream2
}

func Test_tachibana_authURL(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name  string
		arg1  Environment
		arg2  ApiVersion
		want1 string
	}{
		{name: "環境を指定しなければ本番環境",
			arg1:  EnvironmentUnspecified,
			arg2:  ApiVersionV4R3,
			want1: "https://kabuka.e-shiten.jp/e_api_v4r3/auth/"},
		{name: "本番環境を指定すれば本番環境",
			arg1:  EnvironmentProduction,
			arg2:  ApiVersionV4R3,
			want1: "https://kabuka.e-shiten.jp/e_api_v4r3/auth/"},
		{name: "デモ環境を指定すればデモ環境",
			arg1:  EnvironmentDemo,
			arg2:  ApiVersionV4R3,
			want1: "https://demo-kabuka.e-shiten.jp/e_api_v4r3/auth/"},
		{name: "APIバージョンを指定しなければ最新バージョン",
			arg1:  EnvironmentProduction,
			arg2:  ApiVersionUnspecified,
			want1: "https://kabuka.e-shiten.jp/e_api_v4r3/auth/"},
		{name: "最新のAPIバージョンを指定すれば最新バージョン",
			arg1:  EnvironmentProduction,
			arg2:  ApiVersionLatest,
			want1: "https://kabuka.e-shiten.jp/e_api_v4r3/auth/"},
		{name: "バージョンV4R3を指定すればV4R3",
			arg1:  EnvironmentProduction,
			arg2:  ApiVersionV4R3,
			want1: "https://kabuka.e-shiten.jp/e_api_v4r3/auth/"},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()
			client := &client{}
			got1 := client.authURL(test.arg1, test.arg2)
			if !reflect.DeepEqual(test.want1, got1) {
				t.Errorf("%s error\nwant: %+v\ngot: %+v\n", t.Name(), test.want1, got1)
			}
		})
	}
}

func Test_client_encode(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name  string
		arg1  []byte
		want1 []byte
		want2 error
	}{
		{name: "エンコードできる",
			arg1:  []byte(`{"p_no":"1","p_sd_date":"2020.07.01-10:00:00.000","sCLMID":"CLMAuthLoginRequest","sUserId":"login-id","sPassword":"pswd","japanese":"ひらがなカタカナ漢字"}`),
			want1: []byte(`%7B%22p_no%22%3A%221%22%2C%22p_sd_date%22%3A%222020.07.01-10%3A00%3A00.000%22%2C%22sCLMID%22%3A%22CLMAuthLoginRequest%22%2C%22sUserId%22%3A%22login-id%22%2C%22sPassword%22%3A%22pswd%22%2C%22japanese%22%3A%22%82%D0%82%E7%82%AA%82%C8%83J%83%5E%83J%83i%8A%BF%8E%9A%22%7D`),
			want2: nil},
		{name: "UTF-8からShift-JISにエンコードできない文字列を含むとエラー",
			arg1:  []byte("\u1234"),
			want1: nil,
			want2: EncodeErr},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()
			requester := &requester{}
			got1, got2 := requester.encode(test.arg1)
			if !reflect.DeepEqual(test.want1, got1) || !errors.Is(got2, test.want2) {
				t.Errorf("%s error\nwant: %+v, %+v\ngot: %+v, %+v\n", t.Name(), test.want1,
					test.want2,
					got1, got2)
			}
		})
	}
}

func Test_client_decode(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name  string
		arg1  []byte
		want1 []byte
		want2 error
	}{
		{name: "デコードできる",
			arg1:  []byte{123, 34, 49, 55, 53, 34, 58, 34, 34, 44, 34, 49, 55, 55, 34, 58, 34, 50, 48, 50, 50, 46, 48, 50, 46, 50, 52, 45, 48, 56, 58, 51, 52, 58, 52, 54, 46, 53, 55, 51, 34, 44, 34, 49, 55, 54, 34, 58, 34, 50, 48, 50, 50, 46, 48, 50, 46, 50, 52, 45, 48, 56, 58, 51, 52, 58, 52, 54, 46, 53, 54, 53, 34, 44, 34, 49, 55, 52, 34, 58, 34, 45, 49, 34, 44, 34, 49, 55, 51, 34, 58, 34, 136, 248, 144, 148, 131, 71, 131, 137, 129, 91, 129, 66, 34, 44, 34, 49, 57, 50, 34, 58, 34, 67, 76, 77, 65, 117, 116, 104, 76, 111, 103, 105, 110, 82, 101, 113, 117, 101, 115, 116, 34, 125},
			want1: []byte(`{"175":"","177":"2022.02.24-08:34:46.573","176":"2022.02.24-08:34:46.565","174":"-1","173":"引数エラー。","192":"CLMAuthLoginRequest"}`),
			want2: nil},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()
			requester := &requester{}
			got1, got2 := requester.decode(test.arg1)
			if !reflect.DeepEqual(test.want1, got1) || !errors.Is(got2, test.want2) {
				t.Errorf("%s error\nwant: %+v, %+v\ngot: %+v, %+v\n", t.Name(), test.want1,
					test.want2,
					got1, got2)
			}
		})
	}
}

func Test_NewClient(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name  string
		arg1  Environment
		arg2  ApiVersion
		want1 Client
	}{
		{name: "本番へのクライアントの生成",
			arg1: EnvironmentProduction,
			arg2: ApiVersionLatest,
			want1: &client{
				clock:     newClock(),
				env:       EnvironmentProduction,
				ver:       ApiVersionLatest,
				requester: &requester{},
			}},
		{name: "デモへのクライアントの生成",
			arg1: EnvironmentDemo,
			arg2: ApiVersionV4R3,
			want1: &client{
				clock:     newClock(),
				env:       EnvironmentDemo,
				ver:       ApiVersionLatest,
				requester: &requester{},
			}},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()
			got1 := NewClient(test.arg1, test.arg2)
			if !reflect.DeepEqual(test.want1, got1) {
				t.Errorf("%s error\nwant: %+v\ngot: %+v\n", t.Name(), test.want1, got1)
			}
		})
	}
}

func Test_client_get(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name         string
		status       int
		headers      map[string]string
		body         []byte
		overwriteUrl bool
		arg1         context.Context
		arg2         string
		arg3         interface{}
		arg4         interface{}
		want1        []byte
		hasError     bool
	}{
		{name: "json.Marshalでエラーがでたらエラーを返す",
			arg1:     context.Background(),
			arg2:     "",
			arg3:     []float64{math.Inf(1)},
			arg4:     nil,
			hasError: true},
		{name: "encodeでエラーがでたらエラーを返す",
			arg1:     context.Background(),
			arg2:     "",
			arg3:     loginRequest{UserId: "\u1234"},
			arg4:     nil,
			hasError: true},
		{name: "contextが設定されていなかったらエラー",
			arg1:     nil,
			arg2:     "http://example",
			arg3:     loginRequest{},
			arg4:     nil,
			hasError: true},
		{name: "urlが設定されておらずリクエストできなかったらエラー",
			overwriteUrl: false,
			arg1:         context.Background(),
			arg2:         "",
			arg3:         loginRequest{},
			arg4:         nil,
			hasError:     true},
		{name: "bodyの読み込みに失敗したらエラー",
			status:       http.StatusOK,
			headers:      map[string]string{"Content-Length": "1"},
			body:         nil,
			overwriteUrl: true,
			arg1:         context.Background(),
			arg2:         "",
			arg3:         loginRequest{},
			arg4:         nil,
			hasError:     true},
		{name: "statusがOKでなければエラー",
			status:       http.StatusInternalServerError,
			body:         nil,
			overwriteUrl: true,
			arg1:         context.Background(),
			arg2:         "",
			arg3:         loginRequest{},
			arg4:         nil,
			hasError:     true},
		{name: "エラーなく処理が終わればnilを返す",
			status:       http.StatusOK,
			body:         []byte(`{}`),
			overwriteUrl: true,
			arg1:         context.Background(),
			arg2:         "",
			arg3:         loginRequest{},
			arg4:         &loginResponse{},
			want1:        []byte(`{}`),
			hasError:     false},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()

			mux := http.NewServeMux()
			mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
				for k, v := range test.headers {
					w.Header().Set(k, v)
				}
				w.WriteHeader(test.status)
				_, _ = w.Write(test.body)
			})
			ts := httptest.NewServer(mux)
			defer ts.Close()
			if test.overwriteUrl {
				test.arg2 = ts.URL
			}

			requester := &requester{}
			got1, got2 := requester.get(test.arg1, test.arg2, test.arg3)
			if !reflect.DeepEqual(test.want1, got1) || (got2 != nil) != test.hasError {
				t.Errorf("%s error\nwant: %+v, %+v\ngot: %+v, %+v\n", t.Name(), test.want1, test.hasError, got1, got2)
			}
		})
	}
}

func Test_commonResponse_response(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name     string
		response commonResponse
		want1    CommonResponse
	}{
		{name: "変換できる",
			response: commonResponse{
				No:           2,
				SendDate:     RequestTime{Time: time.Date(2022, 2, 25, 10, 5, 30, 123456789, time.Local)},
				ReceiveDate:  RequestTime{Time: time.Date(2022, 2, 25, 10, 5, 31, 123456789, time.Local)},
				ErrorNo:      ErrorNoProblem,
				ErrorMessage: "",
				MessageType:  MessageTypeLoginResponse,
			},
			want1: CommonResponse{
				No:           2,
				SendDate:     time.Date(2022, 2, 25, 10, 5, 30, 123456789, time.Local),
				ReceiveDate:  time.Date(2022, 2, 25, 10, 5, 31, 123456789, time.Local),
				ErrorNo:      ErrorNoProblem,
				ErrorMessage: "",
				MessageType:  MessageTypeLoginResponse,
			}},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()
			got1 := test.response.response()
			if !reflect.DeepEqual(test.want1, got1) {
				t.Errorf("%s error\nwant: %+v\ngot: %+v\n", t.Name(), test.want1, got1)
			}
		})
	}
}

func Test_client_host(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name  string
		arg1  Environment
		want1 string
	}{
		{name: "envが本番なら本番のホストが返される",
			arg1:  EnvironmentProduction,
			want1: "kabuka.e-shiten.jp"},
		{name: "envがデモならデモのホストが返される",
			arg1:  EnvironmentDemo,
			want1: "demo-kabuka.e-shiten.jp"},
		{name: "envが未指定なら本番のホストが返される",
			arg1:  EnvironmentUnspecified,
			want1: "kabuka.e-shiten.jp"},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()
			client := &client{}
			got1 := client.host(test.arg1)
			if !reflect.DeepEqual(test.want1, got1) {
				t.Errorf("%s error\nwant: %+v\ngot: %+v\n", t.Name(), test.want1, got1)
			}
		})
	}
}

func Test_client_stream(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name                   string
		serverStatus           int
		serverBodies           [][]byte
		serverInterval         time.Duration
		serverTransferEncoding string
		arg1WithTimeout        bool
		arg1Timeout            time.Duration
		arg1Nil                bool
		arg2ServerURL          bool
		arg3                   interface{}
		wantResult             [][]byte
		wantErrorLen           int
	}{
		{name: "リクエストのjson化に失敗したらエラーを返して終了",
			arg1WithTimeout: false,
			arg3:            []float64{math.Inf(1)},
			wantResult:      [][]byte{},
			wantErrorLen:    1},
		{name: "リクエストのエンコードに失敗したらエラーを返して終了",
			arg1WithTimeout: false,
			arg3:            "\u1234",
			wantResult:      [][]byte{},
			wantErrorLen:    1},
		{name: "コネクションのOpenに失敗したらエラーを返して終了",
			arg1WithTimeout: false,
			arg3:            "",
			wantResult:      [][]byte{},
			wantErrorLen:    1},
		{name: "リクエストの生成に失敗したらエラーを返して終了",
			arg2ServerURL: true,
			arg3:          "",
			wantResult:    [][]byte{},
			wantErrorLen:  1},
		//{name: "リクエストの送信に失敗したらエラーを返して終了"},
		//{name: "レスポンスの読み込みに失敗したらエラーを返して終了"},
		{name: "chunked responseでなければエラーを返して終了",
			serverStatus:           200,
			serverTransferEncoding: "no-chunked",
			arg1WithTimeout:        false,
			arg1Timeout:            0,
			arg1Nil:                false,
			arg2ServerURL:          true,
			arg3:                   "",
			wantResult:             [][]byte{},
			wantErrorLen:           1},
		{name: "context.Done()が発生したらそこで終了",
			serverStatus: 200,
			serverBodies: [][]byte{
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 50, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 49, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 53, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 51, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 50, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 53, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 52, 58, 49, 48, 46, 57, 55, 56, 34, 44, 34, 112, 95, 110, 111, 34, 58, 34, 50, 34, 44, 34, 112, 95, 114, 118, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 50, 54, 34, 44, 34, 112, 95, 101, 114, 114, 110, 111, 34, 58, 34, 48, 34, 44, 34, 112, 95, 101, 114, 114, 34, 58, 34, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 67, 76, 77, 69, 118, 101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 67, 111, 109, 112, 108, 101, 116, 101, 34, 125}},
			serverInterval:         1 * time.Second,
			serverTransferEncoding: "chunked",
			arg1WithTimeout:        true,
			arg1Timeout:            1 * time.Second,
			arg1Nil:                false,
			arg2ServerURL:          true,
			arg3:                   "",
			wantResult: [][]byte{
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 50, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 49, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 53, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 125}},
			wantErrorLen: 0},
		//{name: "scanからエラーが返されたらエラーを返して終了"},
		{name: "scanが終了してchanがcloseされたらそこで終了",
			serverStatus: 200,
			serverBodies: [][]byte{
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 50, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 49, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 53, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 51, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 50, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 53, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 52, 58, 49, 48, 46, 57, 55, 56, 34, 44, 34, 112, 95, 110, 111, 34, 58, 34, 50, 34, 44, 34, 112, 95, 114, 118, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 50, 54, 34, 44, 34, 112, 95, 101, 114, 114, 110, 111, 34, 58, 34, 48, 34, 44, 34, 112, 95, 101, 114, 114, 34, 58, 34, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 67, 76, 77, 69, 118, 101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 67, 111, 109, 112, 108, 101, 116, 101, 34, 125}},
			serverInterval:         1 * time.Second,
			serverTransferEncoding: "chunked",
			arg1WithTimeout:        false,
			arg1Timeout:            1 * time.Second,
			arg1Nil:                false,
			arg2ServerURL:          true,
			arg3:                   "",
			wantResult: [][]byte{
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 50, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 49, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 53, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 51, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 50, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 53, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 52, 58, 49, 48, 46, 57, 55, 56, 34, 44, 34, 112, 95, 110, 111, 34, 58, 34, 50, 34, 44, 34, 112, 95, 114, 118, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 50, 54, 34, 44, 34, 112, 95, 101, 114, 114, 110, 111, 34, 58, 34, 48, 34, 44, 34, 112, 95, 101, 114, 114, 34, 58, 34, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 67, 76, 77, 69, 118, 101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 67, 111, 109, 112, 108, 101, 116, 101, 34, 125}},
			wantErrorLen: 0},

		{name: "context.Done()が発生したらそこで終了(StreamRequestでの場合)",
			serverStatus: 200,
			serverBodies: [][]byte{
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 50, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 49, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 53, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 51, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 50, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 53, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 125},
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 52, 58, 49, 48, 46, 57, 55, 56, 34, 44, 34, 112, 95, 110, 111, 34, 58, 34, 50, 34, 44, 34, 112, 95, 114, 118, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 50, 54, 34, 44, 34, 112, 95, 101, 114, 114, 110, 111, 34, 58, 34, 48, 34, 44, 34, 112, 95, 101, 114, 114, 34, 58, 34, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 67, 76, 77, 69, 118, 101, 110, 116, 68, 111, 119, 110, 108, 111, 97, 100, 67, 111, 109, 112, 108, 101, 116, 101, 34, 125}},
			serverInterval:         1 * time.Second,
			serverTransferEncoding: "chunked",
			arg1WithTimeout:        true,
			arg1Timeout:            1 * time.Second,
			arg1Nil:                false,
			arg2ServerURL:          true,
			arg3:                   StreamRequest{},
			wantResult: [][]byte{
				{123, 34, 112, 95, 115, 100, 95, 100, 97, 116, 101, 34, 58, 34, 50, 48, 50, 50, 46, 48, 51, 46, 49, 56, 45, 50, 50, 58, 50, 51, 58, 53, 50, 46, 55, 52, 50, 34, 44, 34, 115, 67, 76, 77, 73, 68, 34, 58, 34, 76, 77, 68, 97, 116, 101, 90, 121, 111, 117, 104, 111, 117, 34, 44, 34, 115, 68, 97, 121, 75, 101, 121, 34, 58, 34, 48, 48, 49, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 55, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 54, 34, 44, 34, 115, 77, 97, 101, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 53, 34, 44, 34, 115, 84, 104, 101, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 49, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 50, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 50, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 51, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 52, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 53, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 53, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 56, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 54, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 57, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 55, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 48, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 56, 34, 58, 34, 50, 48, 50, 50, 48, 51, 51, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 57, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 49, 34, 44, 34, 115, 89, 111, 107, 117, 69, 105, 103, 121, 111, 117, 68, 97, 121, 95, 49, 48, 34, 58, 34, 50, 48, 50, 50, 48, 52, 48, 52, 34, 44, 34, 115, 75, 97, 98, 117, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 44, 34, 115, 75, 97, 98, 117, 75, 97, 114, 105, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 52, 34, 44, 34, 115, 66, 111, 110, 100, 85, 107, 101, 119, 97, 116, 97, 115, 105, 68, 97, 121, 34, 58, 34, 50, 48, 50, 50, 48, 51, 50, 51, 34, 125}},
			wantErrorLen: 0},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()
			requester := &requester{insecureSkipVerify: true}

			var ctx context.Context
			if !test.arg1Nil {
				ctx = context.Background()
				if test.arg1WithTimeout {
					tCtx, cf := context.WithTimeout(ctx, test.arg1Timeout)
					ctx = tCtx
					defer cf()
				}
			}

			var url string
			if test.arg2ServerURL {
				mux := http.NewServeMux()
				mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
					flusher, _ := w.(http.Flusher)
					w.Header().Set("X-Content-Type-Options", "nosniff")
					w.WriteHeader(test.serverStatus)

					for _, b := range test.serverBodies {
						_, _ = w.Write([]byte(string(b) + "\n"))
						flusher.Flush()
						time.Sleep(test.serverInterval)
					}
				})
				ts := httptest.NewTLSServer(mux)
				defer ts.Close()
				url = ts.URL
			}

			got1, got2 := requester.stream(ctx, url, test.arg3)

			results := make([][]byte, 0)
			errs := make([]error, 0)
			func() {
				for {
					select {
					case b, ok := <-got1:
						if !ok {
							return
						}
						results = append(results, b)
					case err, ok := <-got2:
						if ok {
							errs = append(errs, err)
						}
						return
					}
				}
			}()

			if !reflect.DeepEqual(test.wantResult, results) || !reflect.DeepEqual(test.wantErrorLen, len(errs)) {
				t.Errorf("%s error\nwant: %+v, %+v\ngot: %+v, %+v\n", t.Name(), test.wantResult, test.wantErrorLen, results, errs)
			}
		})
	}
}
